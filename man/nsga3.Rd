% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/nsga3.R
\name{nsga3}
\alias{nsga3}
\title{Non-Dominated Sorting in Genetic Algorithms III}
\usage{
nsga3(
  type = c("binary", "real-valued", "permutation"),
  algorithm = c("NSGA", "NSGA-II", "NSGA-III"),
  fitness,
  ...,
  optimal,
  lower,
  upper,
  nBits,
  population = generate_population_real,
  selection = ga_tourSelection_R,
  crossover = gareal_laCrossover_R,
  mutation = gareal_raMutation_R,
  popSize = 50,
  nObj = ncol(fitness(matrix(10000, ncol = 100, nrow = 100))),
  dshare,
  pcrossover = 0.8,
  pmutation = 0.1,
  elitism = 0,
  updatePop = FALSE,
  postFitness = NULL,
  maxiter = 100,
  run = maxiter,
  maxFitness = Inf,
  names = NULL,
  suggestions = NULL,
  optim = FALSE,
  optimArgs = list(method = "L-BFGS-B", poptim = 0.05, pressel = 0.5, control =
    list(fnscale = -1, maxit = 100)),
  keepBest = FALSE,
  parallel = FALSE,
  monitor = if (interactive()) nsgaMonitor else FALSE,
  seed = NULL
)
}
\arguments{
\item{type}{the type of genetic algorithm to be run depending on the nature of decision variables.
Possible values are:
\describe{
\item{\code{"binary"}}{for binary representations of decision variables.}
\item{\code{"real-valued"}}{for optimization problems where the decision variables are floating-point representations of real numbers.}
\item{\code{"permutation"}}{for problems that involves reordering of a list of objects.}
}}

\item{fitness}{the fitness function, any allowable R function which takes as input an individual string representing a potential solution, and returns a numerical value describing its “fitness”.}

\item{...}{additional arguments to be passed to the fitness function. This allows to write fitness functions that keep some variables fixed during the search}

\item{lower}{a vector of length equal to the decision variables providing the lower bounds of the search space in case of real-valued or permutation encoded optimizations. Formerly this argument was named min; its usage is allowed but deprecated.}

\item{upper}{a vector of length equal to the decision variables providing the upper bounds of the search space in case of real-valued or permutation encoded optimizations. Formerly this argument was named max; its usage is allowed but deprecated.}

\item{nBits}{a value specifying the number of bits to be used in binary encoded optimizations}

\item{population}{an R function for randomly generating an initial population. See \code{\link[=nsga_Population]{nsga_Population()}} for available functions.}

\item{selection}{an R function performing selection, i.e. a function which generates a new population of individuals from the current population probabilistically according to individual fitness. See \code{\link[=nsga_Selection]{nsga_Selection()}} for available functions.}

\item{crossover}{an R function performing crossover, i.e. a function which forms offsprings by combining part of the genetic information from their parents. See \code{\link[=nsga_Crossover]{nsga_Crossover()}} for available functions.}

\item{mutation}{an R function performing mutation, i.e. a function which randomly alters the values of some genes in a parent chromosome. See \code{\link[=nsga_Mutation]{nsga_Mutation()}} for available functions.}

\item{popSize}{the population size.}

\item{nObj}{number of objective in the fitness function.}

\item{dshare}{the maximun phenotypic distance allowed between any two individuals to become members of a niche.}

\item{pcrossover}{the probability of crossover between pairs of chromosomes. Typically this is a large value and by default is set to 0.8.}

\item{pmutation}{the probability of mutation in a parent chromosome. Usually mutation occurs with a small probability, and by default is set to 0.1.}

\item{elitism}{the number of best fitness individuals to survive at each generation. By default the top 5\% individuals will survive at each iteration.}

\item{updatePop}{a logical defaulting to FALSE. If set at TRUE the first attribute attached to the value returned by the user-defined fitness function is used to update the population.
Be careful though, this is an experimental feature!}

\item{postFitness}{a user-defined function which, if provided, receives the current nsga-class object as input, performs post fitness-evaluation steps, then returns an updated version of the object which is used to update the NSGA search.
Be careful though, this is an experimental feature!}

\item{maxiter}{the maximum number of iterations to run before the NSGA search is halted.}

\item{run}{the number of consecutive generations without any improvement in the best fitness value before the NSGA is stopped}

\item{maxFitness}{the upper bound on the fitness function after that the NSGA search is interrupted.}

\item{names}{a vector of character strings providing the names of decision variables.}

\item{suggestions}{a matrix of solutions strings to be included in the initial population. If provided the number of columns must match the number of decision variables.}

\item{optim}{a logical defaulting to FALSE determining whether or not a local search using general-purpose optimisation algorithms should be used. See argument optimArgs for further details and finer control.}

\item{optimArgs}{a list controlling the local search algorithm with the following components:}

\item{keepBest}{a logical argument specifying if best solutions at each iteration should be saved in a slot called bestSol. See \linkS4class{nsga}.}

\item{parallel}{An optional argument which allows to specify if the Genetic Algorithm should be run sequentially or in parallel.}

\item{monitor}{a logical or an R function which takes as input the current state of the nsga-class object and show the evolution of the search. By default, for interactive sessions the function nsgaMonitor prints the average and best fitness values at each iteration. If set to plot these information are plotted on a graphical device. Other functions can be written by the user and supplied as argument. In non interactive sessions, by default monitor = FALSE so any output is suppressed.}

\item{seed}{an integer value containing the random number generator state. This argument can be used to replicate the results of a NSGA search. Note that if parallel computing is required, the doRNG package must be installed.}
}
\value{
Returns an object of class nsga-class. See \linkS4class{nsga} for a description of available slots information.
}
\description{
Minimization of a fitness function using non-dominated sorting genetic algorithms - III (NSGA-IIIs).
Multiobjective evolutionary algorithms
}
\details{
The Non-dominated genetic algorithms III is a meta-heuristic proposed by K. Deb and H. Jain in 2013.
The purpose of the algorithms is to find an efficient way to optimize multi-objectives functions (more than three).
}
\references{
K. Deb and H. Jain, "An Evolutionary Many-Objective Optimization Algorithm Using Reference-Point-Based Nondominated Sorting Approach, Part I: Solving Problems With Box Constraints," in IEEE Transactions on Evolutionary Computation, vol. 18, no. 4, pp. 577-601, Aug. 2014, doi: 10.1109/TEVC.2013.2281535.

Scrucca L. (2013). GA: A Package for Genetic Algorithms in R. Journal of Statistical Software, 53(4), 1-37,
\url{http://www.jstatsoft.org/v53/i04/}.
}
\seealso{
\code{\link[=nsga]{nsga()}}, \code{\link[=nsga3]{nsga3()}}
}
\author{
Francisco Benitez
\email{benitez.fj@hotmail.com}
}
